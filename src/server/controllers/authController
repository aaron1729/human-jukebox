const spotifyApi = require('../utils/apiWrapper');
const { query } = require('../models/models');


const authController = {};

// save the cookies spotifyId, access, and refresh on res.locals, possibly for later use (e.g. in authController.spotifyIdAndAccessToDb).
// store a boolean as res.locals.cookieMatch based on whether the cookies "spotifyId" and "access" exist and are a match in our db
authController.checkCookies = (req, res, next) => {
    try {
        console.log('inside of authController.checkCookies')
        res.locals.spotifyId = req.cookies.spotifyId;
        res.locals.access = req.cookies.access;
        res.locals.refresh = req.cookies.refresh;
        
        const spotifyId = res.locals.spotifyId;
        const access = res.locals.access;

        if (!spotifyId || !access) {
            res.locals.cookieMatch = false;
            return next();
        }
        const getHandleAndAccessFromDbQueryString = `SELECT handle, access FROM public.musicians WHERE spotify_id = '${spotifyId}'`;
        query(getHandleAndAccessFromDbQueryString).then(data => {
            console.log('after db query inside of authController.checkCookies, the data is:', data.rows)
            const accessFromDb = data.rows[0].access;
            const handleFromDb = data.rows[0].handle;
            if (access === accessFromDb) {
                res.locals.cookieMatch = true;
                res.locals.handle = handleFromDb;
            } else {
                res.locals.cookieMatch = false;
            }
            return next();
        });
    } catch(err) {
        return next({
            log: 'error checking cookies',
            status: err.statusCode,
            message: {error: 'failed to check cookies'}
        });
    }
}


// when this is used, it follows the above middleware. if cookies don't match, it ends the request/response cycle.
authController.endCycleIfCookiesUnmatched = (req, res, next) => {
    console.log('inside of authController.endCycleIfCookiesUnmatched');
    if (!res.locals.cookieMatch) {
        return res.status(200).json({error: 'sorry, cookies did not match'})
    } else {
        return next();
    }
}


// get two tokens (long strings)
    // set them as cookies called 'access' and 'refresh'
    // also save them on res.locals
    // also invoke the spotifyApi methods setAccessToken and setRefreshToken with these arguments [added 12/13/2022... is this helpful / needed / doesn't break anything?]
// when this function is triggered, req.query.code has been set to equal a massive string (sent by the spotify redirect).
authController.getTokens = (req, res, next) => {
    console.log('inside of authController.getTokens middleware, and req.query.code is:', req.query.code);
    try {
        spotifyApi.authorizationCodeGrant(req.query.code)
        .then(data => {
            // can additionally set an expiration on the cookie (say N minutes) e.g. using res.cookie('cookieName', cookieValue, {maxAge: 1000 * 60 * N})
            res.cookie('access', data.body.access_token).cookie('refresh', data.body.refresh_token);
            res.locals.access = data.body.access_token;
            res.locals.refresh = data.body.refresh_token;
            spotifyApi.setAccessToken(res.locals.access);
            spotifyApi.setRefreshToken(res.locals.refresh);
            return next();
        })
    } catch(err) {
        return next({
            log: 'error getting access and refresh tokens',
            status: err.statusCode,
            message: {error: 'failed to get access and refresh tokens'}
        });
    }
}


// given a refresh token, get a new access token and save it:
    // on res.locals
    // on the response object, to be set as a new cookie on the browser
    // in the Spotify API wrapper
authController.getNewAccessToken = (req, res, next) => {
    console.log('inside of authController.getNewAccessToken middleware, and cookies are', req.cookies);
    const refresh = req.cookies.refresh;
    try {
        spotifyApi.setRefreshToken(refresh);
        spotifyApi.refreshAccessToken()
        .then(data => {
            console.log('the returned data from spotifyApi.refreshAccessToken is', data.body.access_token);
            const access = data.body.access_token
            res.locals.access = access;
            res.cookie('access', access);
            spotifyApi.setAccessToken(access);
            return next();
        })
    } catch(err) {
        return next({
            log: 'error refreshing access token',
            status: err.statusCode,
            message: {error: 'failed to refresh access token.'}
        })
    }
}


// using a musician's spotify access token (saved as res.locals.access), get their spotify id and set it as res.locals.spotifyId .
authController.getSpotifyId = (req, res, next) => {
    try {
        spotifyApi.setAccessToken(res.locals.access);
        spotifyApi.getMe().then(userData => {
                res.locals.spotifyId = userData.body.id;
                res.cookie('spotifyId', res.locals.spotifyId);
                return next();
            }
        )
    } catch(err) {
        return next({
            log: 'error getting spotify id',
            status: err.statusCode,
            message: {error: 'failed to get spotify id. (perhaps you\'re in dev mode and the user isn\'t whitelisted in your spotify developer dashboard?)'}
        });
    }
}


// given a spotify id and an access token (saved as res.locals.spotifyId and res.locals.access), check if the spotify id is in the database.
    // if so, update its access token there.
    // if not, create a new row in the database with some default values.
authController.spotifyIdAndAccessToDb = (req, res, next) => {
    try {
        const spotifyId = res.locals.spotifyId;
        const access = res.locals.access;
        const musicianInfoQueryString = `SELECT * FROM public.musicians WHERE spotify_id = '${spotifyId}'`;
        query(musicianInfoQueryString).then(data => {
            console.log('the array of musician data (which should have 0 or 1 elements) is:', data.rows)
            if (data.rows.length) {
                console.log('found musician in db');
                const updateAccessInDbQueryString = `UPDATE public.musicians SET access = '${access}' WHERE spotify_id = '${spotifyId}'`;
                query(updateAccessInDbQueryString).then(data => {
                    if (data.rowCount === 1) {
                        return next();
                    } else {
                        return next({
                            log: 'error updating access token in db',
                            status: err.statusCode,
                            message: {error: 'failed to update access token in db'}
                        });
                    }
                })
            } else {
                const addMusicianToDbQueryString = `INSERT INTO public.musicians (display_name, bio, handle, spotify_id, access) VALUES ('temp display name', 'This is the bio of musician ${spotifyId}.', '${spotifyId}', '${spotifyId}', '${access}')`;
                query(addMusicianToDbQueryString).then(data => {
                    console.log('added new musician to db, and returned data is:', data);
                    return next();
                })
            }
        })
    } catch(err) {
        return next({
            log: 'error syncing spotify id and access token with db',
            status: err.statusCode,
            message: {error: 'failed to sync spotify id and access token with db'}
        });
    }
}


// delete the cookies containing a musician's access and refresh tokens
authController.deleteCookies = (req, res, next) => {
    res.clearCookie('access').clearCookie('refresh').clearCookie('spotifyId');
    return next();
}


module.exports = authController;