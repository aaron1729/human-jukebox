const { query } = require('express');
const db = require('../models/models');

const musicianController = {};


// this middleware function is fed a musician's handle (saved as req.params.handle), retrieves their info from the musicians table in the database, and saves it as res.locals.musicianInfo .
musicianController.getMusicianInfoFromDb = (req, res, next) => {
    try {
        const {handle} = req.params;
        const getMusicianInfoQueryString = `SELECT * FROM musicians WHERE handle = '${handle}'`;
        db.query(getMusicianInfoQueryString).then(data => {
            console.log('inside of musicianController.getMusicianInfoFromDb, and the data.rows are:', data.rows);
            if (!data.rows[0]) {
                return next()
            }
            res.locals.info = data.rows[0]
            console.log('inside of musicianController.getMusicianInfoFromDb, and the info is:', res.locals.info)
            // res.locals.spotifyId = res.locals.info.spotify_id
            // const info = data.rows[0];
            // delete info.access;
            // delete info.spotify_id;
            // if (!info.instagram_show) {
            //     delete info.instagram;
            // };
            // if (!info.venmo_show) {
            //     delete info.venmo;
            // };
            // console.log('and now the info is:', info)
            // res.locals.info = info;
            return next();
        })
    } catch(err) {
        return next({
            log: 'error getting public musician info from database',
            status: err.statusCode,
            message: {error: 'failed to get public musician info from database'}
        })

    }
}


// this middleware function is given all of a musician's info (saved as res.locals.info) and removes the private stuff.
musicianController.removePrivateInfo = (req, res, next) => {
    if (!res.locals.info) {
        return res.status(200).json({error: 'sorry, handle not found in database'})
    }
    delete res.locals.info.access;
    delete res.locals.info.spotify_id;
    if (!res.locals.info.instagram_show) {
        delete res.locals.info.instagram;
    }
    if (!res.locals.info.venmo_show) {
        delete res.locals.info.venmo;
    }
    console.log('after running musicianController.removePrivateInfo, the info is:', res.locals.info);
    return next();
}




// UNDER CONSTRUCTION
// this middleware function is given an object of updates to the musician info (living on req.body) and tries to make them in the database.
musicianController.updateMusicianInfoInDb = (req, res, next) => {
    try {
        const spotify_id = req.params.spotify_id;
        const update = req.body;

        console.log('inside of musicianController.updateInfo, and the update object is:', update);
        console.log('and the spotify_id is:', spotify_id);

        ///// this assumes there's only one KVP in the update object!! if that changes, change this.
        let kvpStringArray = [];
        for (const key in update) {
            let value = update[key];            
            console.log('the key is:', key);
            console.log('the value is:', value);
            // if the value is a string, prepare it for the SQL query: escape its single-quote-marks (i.e. double them) and then wrap the whole thing in single-quote-marks. (but if it's a boolean, we _don't_ want to have quote marks around it.)
            if (typeof value === "string") {
                value = value.replaceAll("'", "''");
                value = `'${value}'`
                console.log('and now the updated value is:', value);
            }
            kvpStringArray.push(key + " = " + value);
        }

        console.log('kvpStringArray is:', kvpStringArray);

        if (!kvpStringArray) {
            return next();
        }

        const kvpString = kvpStringArray.join(", ");

        console.log('kvpString is:', kvpString)

        const updateKVPInDbQueryString = `UPDATE public.musicians SET ${kvpString} WHERE spotify_id = '${spotify_id}'`;
        console.log('the query string is:', updateKVPInDbQueryString);
        db.query(updateKVPInDbQueryString).then(data => {
            console.log('after attempting to update the database, it returned the data:', data);
            if (data.rowCount === 1) {
                res.locals.success = true;
            } else {
                res.locals.success = false;
            }
            return next();
        })

    } catch(err) {
        return next({
            log: 'error updating musician info in db',
            status: err.statusCode || 418,
            message: {error: 'failed to update musician info in db'}
        })
    }
}

module.exports = musicianController;