const db = require('../models/models');
const spotifyApi = require('../utils/apiWrapper');

const songController = {};


// this middleware function is fed a musician's spotify id (saved as res.locals.spotifyId), retrieves their array of songs from the database, and saves it as res.locals.songs .
songController.getSongs = (req, res, next) => {
    const spotifyId = res.locals.info.spotify_id;
    if (!spotifyId) {
        return next();
    }
    console.log('inside of songController.getSongs, and spotifyId is', spotifyId)
    const getMusicianSongsQueryString = `SELECT songs.*, musicians_songs.displayed, musicians_songs.familiarity FROM songs JOIN musicians_songs ON songs.spotify_id = musicians_songs.song_spotify_id WHERE musicians_songs.musician_spotify_id = '${spotifyId}'`
    db.query(getMusicianSongsQueryString).then(data => {
        console.log('inside of songController.getSongs, and data.rows is:', data.rows)
        res.locals.songs = data.rows;
        return next();
    }).catch(err => {
        console.log(err)
    })
}


// this middleware function takes a playlist-array (saved as res.locals.playlist by songController.getSpotifyPlaylist), and:
    // upserts its entries into the songs table;
    // upserts its intries into the musicians_songs join table;
    // in the musicians_songs join table, deletes any old songs that aren't in it.
songController.setPlaylistInDb = (req, res, next) => {

    try {

        const spotifyId = req.cookies.spotifyId;

        const upsertPlaylistSongsIntoSongTableQueryString = res.locals.playlist.map(songObj => `INSERT INTO songs
                (name, artist, album_name, spotify_id, popularity, preview_url)
            VALUES
                ('${songObj.name}', '${songObj.artist}', '${songObj.album_name}', '${songObj.spotify_id}', '${songObj.popularity}', '${songObj.preview_url}')
            ON CONFLICT DO NOTHING;`).join("\n");

        db.query(upsertPlaylistSongsIntoSongTableQueryString).then(data => {

            console.log('just executed upsertPlaylistSongsIntoSongTableQueryString, and the returned data is:', data);

            const upsertPlaylistSongsIntoMusiciansSongsJoinTableQueryString = res.locals.playlist.map((songObj, index) => `INSERT INTO musicians_songs
                (musician_spotify_id, song_spotify_id, repertoire_index)
            VALUES
                ('${spotifyId}', '${songObj.spotify_id}', ${index})
            ON CONFLICT (musician_spotify_id, song_spotify_id) DO UPDATE SET
                repertoire_index = ${index};`).join("\n");
            
            db.query(upsertPlaylistSongsIntoMusiciansSongsJoinTableQueryString).then(data => {

                console.log('just executed upsertPlaylistSongsIntoMusiciansSongsJoinTableQueryString, and the returned data is:', data);

                const getAllSongsForThisMusicianFromMusiciansSongsJoinTableQueryString = `SELECT * FROM musicians_songs WHERE musician_spotify_id = '${spotifyId}';`;

                db.query(getAllSongsForThisMusicianFromMusiciansSongsJoinTableQueryString).then(data => {

                    const rowsInDb = data.rows;

                    console.log('just executed getAllSongsForThisMusicianFromMusiciansSongsJoinTableQueryString, and rowsInDb (the returned data) is:', rowsInDb);

                    const songSpotifyIdsToDrop = [];
                    const songSpotifyIdsToKeep = res.locals.playlist.map(songObj => songObj.spotify_id);
                    rowsInDb.forEach(row => {
                        if (!songSpotifyIdsToKeep.includes(row.song_spotify_id)) {
                            songSpotifyIdsToDrop.push(row.song_spotify_id);
                        };
                    })

                    if (!songSpotifyIdsToDrop.length) {
                        return next();
                    }

                    const dropSongsRemovedFromPlaylistFromMusiciansSongsJoinTableQueryString = songSpotifyIdsToDrop.map(songSpotifyId => `DELETE FROM musicians_songs
                    WHERE (musician_spotify_id = '${spotifyId}' AND song_spotify_id = '${songSpotifyId}');`).join("\n");

                    db.query(dropSongsRemovedFromPlaylistFromMusiciansSongsJoinTableQueryString).then(data => {
                        console.log('just executed dropSongsRemovedFromPlaylistFromMusiciansSongsJoinTableQueryString, and the returned data is:', data);

                        return next();

                    })

                })
            })
        })
    }

    catch(err) {
        return next({
            log: 'error upserting playlist songs to songs table and/or musicians_songs table',
            status: err.statusCode,
            message: {error: 'failed to upsert playlist songs to songs table and/or musicians_songs table'}
        });
    }

}









// this middleware function gets a playlist id (to which a musician has access), retrieves it from the spotify API, and saves as res.locals.playlist an array containing the pieces of data that are relevant for our db.
songController.getSpotifyPlaylist = (req, res, next) => {
    console.log('inside of songController.getSpotifyPlaylist, and cookies are', req.cookies);
    const {playlistId} = req.params;
    console.log('and playlistId is', playlistId);

    // the present middleware function should always come after authController.getNewAccessToken, in case the access token in the cookie has expired. (that function gets a new access token and saves it as res.locals.access .)
    const access = res.locals.access;
    // by contrast, this should be fine regardless (and isn't getting reset anyways).
    const refresh = req.cookies.refresh;

    try {
        spotifyApi.setAccessToken(access);
        spotifyApi.setRefreshToken(refresh);
        console.log('inside of songController.getSpotifyPlaylist, and just set access and refresh tokens on spotifyApi object');
        spotifyApi.getPlaylist(playlistId)
        .then(data => {
            res.locals.playlist = data.body.tracks.items.map(trackObj => {
                const songObj = trackObj.track;
                const spotify_id = songObj.id;
                const name = songObj.name;
                const artist = songObj.artists.map(artistObj => artistObj.name).join(", ");
                const album_name = songObj.album.name;
                const popularity = songObj.popularity;
                const preview_url = songObj.preview_url;
                return {
                    spotify_id,
                    name,
                    artist,
                    album_name,
                    popularity,
                    preview_url
                }
            });
            console.log('inside of songController.getSpotifyPlaylist, and res.locals.playlist is:', res.locals.playlist);
            return next();
        })
    } catch(err) {
        return next({
            log: 'error getting spotify playlist',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlist.'}
        })
    }
}


// this middleware function gets the musician's list of spotify playlists (or at least the first N or so of them) from the spotify API.
songController.getAllSpotifyPlaylists = (req, res, next) => {
    console.log('inside of songController.getAllSpotifyPlaylists, and cookies are', req.cookies);
    // as of 12/20/2022, this middleware function is only called after previous authentication stuff, so these variables ought to have been stored on res.locals. in particular, the access token will have changed! so it's *not* the same one that came on req.cookies .
    const spotifyId = res.locals.spotifyId;
    const access = res.locals.access;
    const refresh = res.locals.refresh;
    try {
        spotifyApi.setAccessToken(access);
        spotifyApi.setRefreshToken(refresh);
        console.log('inside of songController.getAllSpotifyPlaylists, and just set access and refresh tokens on spotifyApi object');
        spotifyApi.getUserPlaylists(spotifyId, {limit: 10})
        .then(data => {
            console.log('just got musician\'s playlists from spotify API');
            res.locals.playlistArr = data.body.items.map(obj => {
                return {
                    playlistName: obj.name,
                    playlistSpotifyId: obj.id,
                    playlistSpotifyUrl: obj.external_urls.spotify
                }
            }
            );
            console.log('in songController.getAllSpotifyPlaylists, a bit of res.locals.playlistArr is:', res.locals.playlistArr.slice(0,2));
            return next();
        });
        }
    catch(err) {
        return next({
            log: 'error getting spotify playlists',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlists.'}
        })
    }
}


module.exports = songController;