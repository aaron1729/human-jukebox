const db = require('../models/models.js');
const spotifyApi = require('../utils/apiWrapper');

const songController = {};


// this middleware function is fed a musician's spotify id (saved as res.locals.spotifyId) retrieves their array of songs from the database, and saves it as res.locals.songs
songController.getSongs = (req, res, next) => {
    const spotifyId = res.locals.info.spotify_id;
    if (!spotifyId) {
        return next();
    }
    console.log('inside of songController.getSongs, and spotifyId is', spotifyId)
    const getMusicianSongsQueryString = `SELECT songs.*, musicians_songs.displayed, musicians_songs.familiarity FROM songs JOIN musicians_songs ON songs.spotify_id = musicians_songs.song_spotify_id WHERE musicians_songs.musician_spotify_id = '${spotifyId}'`
    db.query(getMusicianSongsQueryString).then(data => {
        console.log('inside of songController.getSongs, and data.rows is:', data.rows)
        res.locals.songs = data.rows;
        return next();
    }).catch(err => {
        console.log(err)
    })
}






// UNDER CONSTRUCTION!!!
// this middleware function gets a playlist id (to which a musician has access) and retrieves it from the spotify API.
songController.getSpotifyPlaylist = (req, res, next) => {
    console.log('inside of songController.getSpotifyPlaylist, and cookies are', req.cookies);
    const {playlistId} = req.params;
    console.log('and playlistId is', playlistId);

    res.locals.playlist = ['test', 'playlist', 'array']
 
    // const spotifyId = req.cookies.spotifyId;
    const access = req.cookies.access;
    const refresh = req.cookies.refresh;

    try {
        spotifyApi.setAccessToken(access);
        spotifyApi.setRefreshToken(refresh);
        console.log('inside of songController.getSpotifyPlaylist, and just set access and refresh tokens on spotifyApi object');
        spotifyApi.getPlaylist(playlistId)
        .then(data => {
            res.locals.playlist = data.body.tracks.items
            console.log('the data returned from spotifyApi.getPlaylist is', res.locals.playlist)
            return next();
        })
    } catch(err) {
        return next({
            log: 'error getting spotify playlist',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlist.'}
        })
        
    }
}


// this middleware function gets the musician's list of spotify playlists (or at least the first 20 or so of them) from the spotify API.
songController.getAllSpotifyPlaylists = (req, res, next) => {
    console.log('inside of songController.getAllSpotifyPlaylists, and cookies are', req.cookies);
    // as of now (12/20/2022), this middleware function is only called after previous authentication stuff, so these variables ought to have been stored on res.locals. in particular, the access token will have changed! so it's *not* the same one that came on req.cookies .
    const spotifyId = res.locals.spotifyId;
    const access = res.locals.access;
    const refresh = res.locals.refresh;
    try {
        spotifyApi.setAccessToken(access);
        spotifyApi.setRefreshToken(refresh);
        console.log('inside of songController.getAllSpotifyPlaylists, and just set access and refresh tokens on spotifyApi object');
        spotifyApi.getUserPlaylists(spotifyId, {limit: 5})
        .then(data => {
            console.log('just got musician\'s playlists from spotify API');
            res.locals.playlistArr = data.body.items.map(obj => {
                return {
                    playlistName: obj.name,
                    playlistSpotifyId: obj.id,
                    playlistSpotifyUrl: obj.external_urls.spotify
                }
            }
            );
            console.log('in songController.getAllSpotifyPlaylists, a bit of res.locals.playlistArr is:', res.locals.playlistArr.slice(0,2));
            return next();
        });
        }
    catch(err) {
        return next({
            log: 'error getting spotify playlists',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlists.'}
        })
    }
}


module.exports = songController;