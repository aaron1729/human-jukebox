const db = require('../models/models.js');
const spotifyApi = require('../utils/apiWrapper');

const songController = {};


// this middleware function is fed a musician's spotify id (saved as res.locals.spotifyId) retrieves their array of songs from the database, and saves it as res.locals.songs
songController.getSongs = (req, res, next) => {
    const spotifyId = res.locals.spotifyId;
    if (!spotifyId) {
        return next();
    }
    console.log('inside of songController.getSongs, and spotifyId is', spotifyId)
    const queryString = `SELECT songs.*, musicians_songs.displayed, musicians_songs.familiarity FROM songs JOIN musicians_songs ON songs.spotify_id = musicians_songs.song_spotify_id WHERE musicians_songs.musician_spotify_id = '${spotifyId}'`
    db.query(queryString).then(data => {
        console.log('data.rows is', data.rows)
        res.locals.songs = data.rows;
        return next()
    }).catch(err => {
        console.log(err)
    })
}


// this middleware function gets the musician's list of spotify playlists (or at least the first 20 or so of them) from the spotify API.
songController.getSpotifyPlaylists = async (req, res, next) => {
    console.log('inside of songController.getSpotifyPlaylists, and cookies are', req.cookies);
    spotifyId = req.cookies.spotifyId;
    access = req.cookies.access;
    refresh = req.cookies.refresh;



    res.locals.playlistArr = [
        ['fakePlaylist0 name', 'fakePlaylist0 id', 'fakePlaylist0 url'],
        ['fakePlaylist1 name', 'fakePlaylist1 id', 'fakePlaylist1 url'],
        ['fakePlaylist2 name', 'fakePlaylist2 id', 'fakePlaylist2 url']
    ]




    






    // /////////// attempt with IF-BLOCK
    // this seems to have the same problem as the TRY/CATCH attempt below.




    // spotifyApi.setAccessToken(access);
    // spotifyApi.setRefreshToken(refresh);
    // console.log('just set access and refresh tokens on spotifyApi object');
    // const playlistData = await spotifyApi.getUserPlaylists(spotifyId);
    // console.log('now that we just grabbed it, playlistData is:', playlistData);



    // if (playlistData.statusCode === 200) {
    //     res.locals.playlistArr = playlistData.body.items.map(obj => [obj.name, obj.id, obj.external_urls.spotify]);
    //     console.log('playlistData.statusCode is 200, and res.locals.playlistArr is', res.locals.playlistArr);
    //     // return next();
    // } else {
    //     return next({
    //         log: 'error getting spotify playlists',
    //         status: err.statusCode,
    //         message: {error: 'failed to get spotify playlists.'}
    //     })
    // }
    



    // ///////// attempt with DIRECT FETCH REQUEST, I.E. WITHOUT THE SPOTIFY API WRAPPER
    // // problem: get error:
    //     // ReferenceError: fetch is not defined
    // // this is deeply confusing, since fetch seems to work elsewhere just fine (and doesn't require being imported into the file, either).

    // const uri = 'https://api.spotify.com/v1/users/' + spotifyId + '/playlists'
    // const options = {
    //     method: 'get',
    //     headers: {
    //         'Content-Type': 'application/json',
    //         Authorization: 'Bearer ' + access
    //     }
    // }

    // fetch(uri, options)
    // .then(response => response.json())
    // .then(data => {
    //     console.log('some data from the non-wrapped spotify API call is:', data)
    //     return next();
    // })




    

    // ////////// attempt with TRY/CATCH
    // problem: the call spotifyApi.getUserPlaylists(spotifyId) seems to occur _after_ the remaining middleware/endware functions. so if i keep "return next()" in there, i get the error:
        // Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    // which seems to be because i'm calling the "next" function _after_ the response has already been sent, but (as seen in the console-log) at the end of the /api/getAllPlaylists route handler, i'm just sending back the fake data hard-coded above. if i just do "return" (which is of course ultimately wrong), then i no longer get that error, but still the response data is just the hard-coded array.

    try {
        await spotifyApi.setAccessToken(access);
        await spotifyApi.setRefreshToken(refresh);
        console.log('just set access and refresh tokens on spotifyApi object');
        await spotifyApi.getUserPlaylists(spotifyId)
        .then(data => {
            console.log('just got musician\'s playlists from spotify API');
            console.log('the type of `data` is', typeof(data));
            res.locals.playlistArr = data.body.items.map(obj => [obj.name, obj.id, obj.external_urls.spotify]);
            console.log('in songController.getSpotifyPlaylists, a bit of res.locals.playlistArr is:', res.locals.playlistArr.slice(0,2));
            return;
            // return next()
        });
        }
    catch(err) {
        return next({
            log: 'error getting spotify playlists',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlists.'}
        })
    }



}








module.exports = songController;