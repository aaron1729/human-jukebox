const db = require('../models/models.js');
const spotifyApi = require('../utils/apiWrapper');

const songController = {};


// this middleware function is fed a musician's spotify id (saved as res.locals.spotifyId) retrieves their array of songs from the database, and saves it as res.locals.songs
songController.getSongs = (req, res, next) => {
    const spotifyId = res.locals.spotifyId;
    if (!spotifyId) {
        return next();
    }
    console.log('inside of songController.getSongs, and spotifyId is', spotifyId)
    const queryString = `SELECT songs.*, musicians_songs.displayed, musicians_songs.familiarity FROM songs JOIN musicians_songs ON songs.spotify_id = musicians_songs.song_spotify_id WHERE musicians_songs.musician_spotify_id = '${spotifyId}'`
    db.query(queryString).then(data => {
        console.log('data.rows is', data.rows)
        res.locals.songs = data.rows;
        return next()
    }).catch(err => {
        console.log(err)
    })
}


// this middleware function takes in (WHAT?? a musician's spotify id, access token, maybe also refresh token?) and gets their list of spotify playlists from the spotify API.
songController.getSpotifyPlaylists = (req, res, next) => {
    console.log('inside of songController.getSpotifyPlaylists, and cookies are', req.cookies)
    spotifyId = req.cookies.spotifyId;
    access = req.cookies.access;
    refresh = req.cookies.refresh;
    try {
        spotifyApi.setAccessToken(access);
        spotifyApi.setRefreshToken(refresh);
        spotifyApi.getUserPlaylists(spotifyId)
        .then(data => {
            // the returned data is an object with the keys "body", "headers", and "statusCode"
            // data.body is another object, with keys "href"
            console.log('in songController.getSpotifyPlaylists, some returned data is:', data.body.items.map(obj => {
                return [
                    obj.name,
                    obj.id,
                    obj.external_urls.spotify
                ]
            }))
            res.locals.data = data;
            return next();
        })
    }
    catch(err) {
        return next({
            log: 'error getting spotify playlists',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlists.'}
        })
    }
}





module.exports = songController;