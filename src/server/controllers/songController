const db = require('../models/models.js');
const spotifyApi = require('../utils/apiWrapper');

const songController = {};


// this middleware function is fed a musician's spotify id (saved as res.locals.spotifyId) retrieves their array of songs from the database, and saves it as res.locals.songs
songController.getSongs = (req, res, next) => {
    const spotifyId = res.locals.spotifyId;
    if (!spotifyId) {
        return next();
    }
    console.log('inside of songController.getSongs, and spotifyId is', spotifyId)
    const queryString = `SELECT songs.*, musicians_songs.displayed, musicians_songs.familiarity FROM songs JOIN musicians_songs ON songs.spotify_id = musicians_songs.song_spotify_id WHERE musicians_songs.musician_spotify_id = '${spotifyId}'`
    db.query(queryString).then(data => {
        console.log('data.rows is', data.rows)
        res.locals.songs = data.rows;
        return next()
    }).catch(err => {
        console.log(err)
    })
}


// this middleware function gets the musician's list of spotify playlists (or at least the first 20 or so of them) from the spotify API.
songController.getSpotifyPlaylists = async (req, res, next) => {
    console.log('inside of songController.getSpotifyPlaylists, and cookies are', req.cookies);
    spotifyId = req.cookies.spotifyId;
    access = req.cookies.access;
    refresh = req.cookies.refresh;







    res.locals.playlistArr = [['a fake array of playlists', 'item 1', 'item 2']]


    ////// as of ~4pm on 12/14/2022, still working to make this happen *before* the response cycle ends!

    spotifyApi.setAccessToken(access);
    spotifyApi.setRefreshToken(refresh);
    console.log('just set access and refresh tokens on spotifyApi object');
    const playlistData = await spotifyApi.getUserPlaylists(spotifyId);
    console.log('playlistData is:', playlistData);


    if (playlistData.statusCode === 200) {
        res.locals.playlistArr = playlistData.body.items.map(obj => [obj.name, obj.id, obj.external_urls.spotify]);
        console.log('playlistData.statusCode is 200, and res.locals.playlistArr is', res.locals.playlistArr);
        return next();
    } else {
        return next({
            log: 'error getting spotify playlists',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlists.'}
        })
    }
    




/*

    try {
        spotifyApi.setAccessToken(access);
        spotifyApi.setRefreshToken(refresh);
        console.log('just set access and refresh tokens on spotifyApi object');
        spotifyApi.getUserPlaylists(spotifyId)
        .then(data => {
            console.log('just got musician\'s playlists from spotify API');
            res.locals.playlistArr = data.body.items.map(obj => [obj.name, obj.id, obj.external_urls.spotify]);
            console.log('in songController.getSpotifyPlaylists, res.locals.playlistArr is:', res.locals.playlistArr);
            return next()
        });
        }
    catch(err) {
        return next({
            log: 'error getting spotify playlists',
            status: err.statusCode,
            message: {error: 'failed to get spotify playlists.'}
        })
    }

*/


}





module.exports = songController;